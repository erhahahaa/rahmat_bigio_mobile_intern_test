// Mocks generated by Mockito 5.4.4 from annotations
// in rick_morty/test/core/services/isar.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:isar/isar.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rick_morty/core/services/storage/isar_client.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIsar_0 extends _i1.SmartFake implements _i2.Isar {
  _FakeIsar_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IsarClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsarClient extends _i1.Mock implements _i3.IsarClient {
  MockIsarClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Isar get instance => (super.noSuchMethod(
        Invocation.getter(#instance),
        returnValue: _FakeIsar_0(
          this,
          Invocation.getter(#instance),
        ),
      ) as _i2.Isar);

  @override
  set instance(_i2.Isar? _instance) => super.noSuchMethod(
        Invocation.setter(
          #instance,
          _instance,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isUnitTest(bool? _isUnitTest) => super.noSuchMethod(
        Invocation.setter(
          #isUnitTest,
          _isUnitTest,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i2.Isar> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<_i2.Isar>.value(_FakeIsar_0(
          this,
          Invocation.method(
            #init,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Isar>);
}
